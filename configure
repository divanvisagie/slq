#!/bin/bash
# Configure script for slq - Storstockholms Lokaltrafik Query Tool
# Checks dependencies and sets up build environment

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Configuration variables
PREFIX="/usr/local"
DEBUG=false
ENABLE_SANITIZERS=false
ENABLE_STATIC=false
CC="cc"
VERBOSE=false

# Dependency status
DEPS_OK=true
JANSSON_OK=false
CURL_OK=false
PKG_CONFIG_OK=false

# Functions for output
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[OK]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_header() {
    echo -e "\n${BOLD}$1${NC}"
    echo "$(echo "$1" | sed 's/./=/g')"
}

show_usage() {
    cat << EOF
Usage: ./configure [OPTIONS]

Configure slq build environment and check dependencies.

OPTIONS:
    --prefix=DIR         Installation prefix (default: /usr/local)
    --enable-debug       Build with debug symbols and debugging info
    --enable-sanitizers  Build with AddressSanitizer and UBSan (development)
    --enable-static      Build static binary (experimental)
    --cc=COMPILER        Use specific C compiler (default: cc)
    --verbose           Show detailed output
    --help              Show this help message

EXAMPLES:
    ./configure                           # Standard configuration
    ./configure --prefix=/usr             # Install to /usr instead of /usr/local
    ./configure --enable-debug            # Debug build
    ./configure --enable-sanitizers       # Development build with sanitizers
    ./configure --cc=clang                # Use clang compiler

After running configure, build with:
    make
    make install

For development:
    ./configure --enable-debug --enable-sanitizers
    make test-all

EOF
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --prefix=*)
                PREFIX="${1#*=}"
                shift
                ;;
            --enable-debug)
                DEBUG=true
                shift
                ;;
            --enable-sanitizers)
                ENABLE_SANITIZERS=true
                shift
                ;;
            --enable-static)
                ENABLE_STATIC=true
                shift
                ;;
            --cc=*)
                CC="${1#*=}"
                shift
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            --help)
                show_usage
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                echo "Use --help for usage information."
                exit 1
                ;;
        esac
    done
}

# Check if a command exists
command_exists() {
    command -v "$1" &> /dev/null
}

# Check pkg-config
check_pkg_config() {
    log_info "Checking for pkg-config..."
    if command_exists pkg-config; then
        PKG_CONFIG_OK=true
        local version=$(pkg-config --version)
        log_success "pkg-config found (version $version)"
    else
        PKG_CONFIG_OK=false
        log_error "pkg-config not found"
        echo "  pkg-config is required for dependency management."
        echo "  Install with:"
        echo "    macOS:        brew install pkg-config"
        echo "    Ubuntu/Debian: sudo apt-get install pkg-config"
        echo "    CentOS/RHEL:  sudo yum install pkgconfig"
        DEPS_OK=false
    fi
}

# Check for jansson library
check_jansson() {
    log_info "Checking for jansson (JSON library)..."
    if command_exists pkg-config && pkg-config --exists jansson; then
        JANSSON_OK=true
        local version=$(pkg-config --modversion jansson)
        local cflags=$(pkg-config --cflags jansson)
        local libs=$(pkg-config --libs jansson)
        log_success "jansson found (version $version)"
        if [[ "$VERBOSE" == true ]]; then
            echo "  CFLAGS: $cflags"
            echo "  LIBS: $libs"
        fi
    else
        JANSSON_OK=false
        log_error "jansson not found"
        echo "  jansson is required for JSON parsing."
        echo "  Install with:"
        echo "    macOS:        brew install jansson"
        echo "    Ubuntu/Debian: sudo apt-get install libjansson-dev"
        echo "    CentOS/RHEL:  sudo yum install jansson-devel"
        echo "    Arch Linux:   sudo pacman -S jansson"
        DEPS_OK=false
    fi
}

# Check for libcurl
check_curl() {
    log_info "Checking for libcurl (HTTP library)..."
    if command_exists pkg-config && pkg-config --exists libcurl; then
        CURL_OK=true
        local version=$(pkg-config --modversion libcurl)
        local cflags=$(pkg-config --cflags libcurl)
        local libs=$(pkg-config --libs libcurl)
        log_success "libcurl found (version $version)"
        if [[ "$VERBOSE" == true ]]; then
            echo "  CFLAGS: $cflags"
            echo "  LIBS: $libs"
        fi
    else
        CURL_OK=false
        log_error "libcurl not found"
        echo "  libcurl is required for HTTP requests."
        echo "  Install with:"
        echo "    macOS:        brew install curl (usually pre-installed)"
        echo "    Ubuntu/Debian: sudo apt-get install libcurl4-openssl-dev"
        echo "    CentOS/RHEL:  sudo yum install libcurl-devel"
        echo "    Arch Linux:   sudo pacman -S curl"
        DEPS_OK=false
    fi
}

# Check C compiler
check_compiler() {
    log_info "Checking for C compiler ($CC)..."
    if command_exists "$CC"; then
        local version_output
        if version_output=$("$CC" --version 2>&1 | head -1); then
            log_success "C compiler found: $version_output"
        else
            log_success "C compiler found: $CC"
        fi
    else
        log_error "C compiler '$CC' not found"
        echo "  A C compiler is required to build slq."
        echo "  Install with:"
        echo "    macOS:        xcode-select --install"
        echo "    Ubuntu/Debian: sudo apt-get install build-essential"
        echo "    CentOS/RHEL:  sudo yum groupinstall 'Development Tools'"
        echo "    Arch Linux:   sudo pacman -S base-devel"
        DEPS_OK=false
    fi
}

# Check for make
check_make() {
    log_info "Checking for make..."
    if command_exists make; then
        local version=$(make --version 2>&1 | head -1 || echo "make")
        log_success "make found: $version"
    else
        log_error "make not found"
        echo "  GNU make is required to build slq."
        echo "  Install with your system's package manager."
        DEPS_OK=false
    fi
}

# Check optional tools
check_optional_tools() {
    log_header "Optional Tools"

    # GitHub CLI for publishing
    if command_exists gh; then
        if gh auth status &> /dev/null; then
            log_success "GitHub CLI found and authenticated"
        else
            log_warning "GitHub CLI found but not authenticated"
            echo "  Run 'gh auth login' to enable publishing features"
        fi
    else
        log_warning "GitHub CLI not found"
        echo "  Install 'gh' to enable 'make publish' functionality"
        echo "  See: https://cli.github.com/"
    fi

    # clang-tidy for linting
    if command_exists clang-tidy; then
        log_success "clang-tidy found (enables 'make lint')"
    else
        log_warning "clang-tidy not found"
        echo "  Install clang-tidy to enable static analysis"
    fi

    # bear for compile_commands.json
    if command_exists bear; then
        log_success "bear found (enables 'make compile-commands')"
    else
        log_warning "bear not found"
        echo "  Install bear to generate compile_commands.json for editors"
    fi
}

# Generate config.mk file
generate_config() {
    log_info "Generating config.mk..."

    local cflags="-Wall -Wextra -std=c99"
    local libs=""

    # Add optimization or debug flags
    if [[ "$DEBUG" == true ]]; then
        cflags="$cflags -g -DDEBUG"
        log_info "Debug mode enabled"
    else
        cflags="$cflags -O2"
    fi

    # Add sanitizer flags
    if [[ "$ENABLE_SANITIZERS" == true ]]; then
        cflags="$cflags -fsanitize=address,undefined -fno-omit-frame-pointer"
        libs="$libs -fsanitize=address,undefined"
        log_info "Sanitizers enabled"
    fi

    # Add static linking
    if [[ "$ENABLE_STATIC" == true ]]; then
        libs="$libs -static"
        log_info "Static linking enabled"
    fi

    # Add pkg-config flags
    if [[ "$PKG_CONFIG_OK" == true ]]; then
        cflags="$cflags \$(shell pkg-config --cflags jansson libcurl)"
        libs="$libs \$(shell pkg-config --libs jansson libcurl)"
    fi

    cat > config.mk << EOF
# Generated by configure script - do not edit manually
# Run ./configure to regenerate this file

# Build configuration
CC = $CC
PREFIX = $PREFIX
DEBUG = $DEBUG
ENABLE_SANITIZERS = $ENABLE_SANITIZERS
ENABLE_STATIC = $ENABLE_STATIC

# Compiler flags
CFLAGS = $cflags
LIBS = $libs

# Dependencies status
JANSSON_OK = $JANSSON_OK
CURL_OK = $CURL_OK
PKG_CONFIG_OK = $PKG_CONFIG_OK
EOF

    log_success "Configuration saved to config.mk"
}

# Show build summary
show_summary() {
    log_header "Configuration Summary"
    echo "Compiler:        $CC"
    echo "Install prefix:  $PREFIX"
    echo "Debug mode:      $DEBUG"
    echo "Sanitizers:      $ENABLE_SANITIZERS"
    echo "Static linking:  $ENABLE_STATIC"
    echo ""
    echo "Dependencies:"
    echo "  pkg-config:    $([ "$PKG_CONFIG_OK" = true ] && echo "✓" || echo "✗")"
    echo "  jansson:       $([ "$JANSSON_OK" = true ] && echo "✓" || echo "✗")"
    echo "  libcurl:       $([ "$CURL_OK" = true ] && echo "✓" || echo "✗")"
    echo ""

    if [[ "$DEPS_OK" == true ]]; then
        log_success "All dependencies satisfied!"
        echo ""
        echo "You can now build slq with:"
        echo "  make"
        echo "  make install"
        echo ""
        echo "For development:"
        echo "  make test-all"
        echo "  make lint"
        echo ""
        echo "To publish releases (requires GitHub CLI):"
        echo "  make publish-dry"
        echo "  make release"
    else
        log_error "Missing dependencies - please install them and run configure again"
        exit 1
    fi
}

# Main execution
main() {
    log_header "slq Configuration"
    echo "Checking build environment and dependencies..."

    parse_args "$@"

    log_header "Required Dependencies"
    check_pkg_config
    check_jansson
    check_curl
    check_compiler
    check_make

    check_optional_tools

    if [[ "$DEPS_OK" == true ]]; then
        generate_config
    fi

    show_summary
}

# Run main function with all arguments
main "$@"
